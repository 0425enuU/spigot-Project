From accffd8b9c52629594bbedafe3e2308596005920 Mon Sep 17 00:00:00 2001
From: md_5 <md_5@live.com.au>
Date: Sat, 23 Mar 2013 09:46:33 +1100
Subject: [PATCH] Merge tweaks and configuration

This allows the merging of Experience orbs, as well as the configuration of the merge radius of items. Additionally it refactors the merge algorithm to be a better experience for players.

diff --git a/src/main/java/net/minecraft/world/entity/EntityExperienceOrb.java b/src/main/java/net/minecraft/world/entity/EntityExperienceOrb.java
index a4248a168..b16ff216e 100644
--- a/src/main/java/net/minecraft/world/entity/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/EntityExperienceOrb.java
@@ -167,7 +167,10 @@ public class EntityExperienceOrb extends Entity {
     }
 
     private static boolean b(WorldServer worldserver, Vec3D vec3d, int i) {
-        AxisAlignedBB axisalignedbb = AxisAlignedBB.a(vec3d, 1.0D, 1.0D, 1.0D);
+        // Spigot start
+        double radius = worldserver.spigotConfig.expMerge;
+        AxisAlignedBB axisalignedbb = AxisAlignedBB.a(vec3d, radius, radius, radius);
+        // Spigot end
         int j = worldserver.getRandom().nextInt(40);
         List<EntityExperienceOrb> list = worldserver.a(EntityTypeTest.a(EntityExperienceOrb.class), axisalignedbb, (entityexperienceorb) -> {
             return a(entityexperienceorb, j, i);
diff --git a/src/main/java/net/minecraft/world/entity/item/EntityItem.java b/src/main/java/net/minecraft/world/entity/item/EntityItem.java
index ff3cf5bee..bb9f81eeb 100644
--- a/src/main/java/net/minecraft/world/entity/item/EntityItem.java
+++ b/src/main/java/net/minecraft/world/entity/item/EntityItem.java
@@ -200,7 +200,10 @@ public class EntityItem extends Entity {
 
     private void mergeNearby() {
         if (this.A()) {
-            List<EntityItem> list = this.level.a(EntityItem.class, this.getBoundingBox().grow(0.5D, 0.0D, 0.5D), (entityitem) -> {
+            // Spigot start
+            double radius = level.spigotConfig.itemMerge;
+            List<EntityItem> list = this.level.a(EntityItem.class, this.getBoundingBox().grow(radius, radius, radius), (entityitem) -> {
+                // Spigot end
                 return entityitem != this && entityitem.A();
             });
             Iterator iterator = list.iterator();
@@ -230,7 +233,7 @@ public class EntityItem extends Entity {
         ItemStack itemstack1 = entityitem.getItemStack();
 
         if (Objects.equals(this.getOwner(), entityitem.getOwner()) && a(itemstack, itemstack1)) {
-            if (itemstack1.getCount() < itemstack.getCount()) {
+            if (true || itemstack1.getCount() < itemstack.getCount()) { // Spigot
                 a(this, itemstack, entityitem, itemstack1);
             } else {
                 a(entityitem, itemstack1, this, itemstack);
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index fb9c4fc78..8c855cf9b 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -128,4 +128,18 @@ public class SpigotWorldConfig
         sweetBerryModifier = getAndValidateGrowth( "SweetBerry" );
         kelpModifier = getAndValidateGrowth( "Kelp" );
     }
+
+    public double itemMerge;
+    private void itemMerge()
+    {
+        itemMerge = getDouble("merge-radius.item", 2.5 );
+        log( "Item Merge Radius: " + itemMerge );
+    }
+
+    public double expMerge;
+    private void expMerge()
+    {
+        expMerge = getDouble("merge-radius.exp", 3.0 );
+        log( "Experience Merge Radius: " + expMerge );
+    }
 }
-- 
2.25.1

